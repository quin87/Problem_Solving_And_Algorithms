#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'findSecrets' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER_ARRAY arr
#  2. 2D_INTEGER_ARRAY queries
#
def gcdExtended(a, b):
 
    # Base Case
    if a == 0:
        return b, 0, 1
 
    gcd, x1, y1 = gcdExtended(b % a, a)
 
    # Update x and y using results of recursive
    # call
    x = y1 - (b//a) * x1
    y = x1
 
    return gcd, x, y
#code contributed by https://www.geeksforgeeks.org/euclidean-algorithms-basic-and-extended/

def findSecrets(arr, queries):
    lst=[1]
    mod = 10**9+7
    ans = []
    for i in arr:
        lst.append((lst[-1]*i)%mod)
    for i,j in queries:
        #print(i,lst[i],j,lst[j])
        inverse = (gcdExtended(lst[i-1],mod)[1])%mod
        ans.append( (lst[j]*inverse)%mod )
    return ans
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    q = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    queries = []

    for _ in range(q):
        queries.append(list(map(int, input().rstrip().split())))

    results = findSecrets(arr, queries)

    fptr.write('\n'.join(map(str, results)))
    fptr.write('\n')

    fptr.close()
